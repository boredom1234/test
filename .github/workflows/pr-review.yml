name: PR Review Bot
on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for quality tools
      
      # Set up Node.js for ESLint (only if package.json exists)
      - name: Check for Node.js project
        id: check-node
        run: |
          if [ -f "package.json" ]; then
            echo "has_node=true" >> $GITHUB_OUTPUT
          else
            echo "has_node=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        if: steps.check-node.outputs.has_node == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: |
            **/package.json
      
      # Set up Python for Pylint (only if Python files exist)
      - name: Check for Python project
        id: check-python
        run: |
          if [ -n "$(find . -name "*.py" -type f -not -path "*/\.*" | head -1)" ]; then
            echo "has_python=true" >> $GITHUB_OUTPUT
          else
            echo "has_python=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check-python.outputs.has_python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements.txt
            **/pyproject.toml
            **/setup.py
            **/Pipfile
            **/Pipfile.lock
      
      # Set up Go for Golint (only if Go files exist)
      - name: Check for Go project
        id: check-go
        run: |
          if [ -n "$(find . -name "*.go" -type f -not -path "*/\.*" | head -1)" ]; then
            echo "has_go=true" >> $GITHUB_OUTPUT
          else
            echo "has_go=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Go
        if: steps.check-go.outputs.has_go == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
          cache: true
          cache-dependency-path: |
            **/go.mod
            **/go.sum
      
      # Set up Java for Checkstyle (only if Java files exist)
      - name: Check for Java project
        id: check-java
        run: |
          if [ -n "$(find . -name "*.java" -type f -not -path "*/\.*" | head -1)" ]; then
            echo "has_java=true" >> $GITHUB_OUTPUT
          else
            echo "has_java=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Java
        if: steps.check-java.outputs.has_java == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          cache-dependency-path: |
            **/pom.xml
            **/build.gradle
            **/build.gradle.kts
      
      # Set up Ruby for RuboCop (only if Ruby files exist)
      - name: Check for Ruby project
        id: check-ruby
        run: |
          if [ -n "$(find . -name "*.rb" -type f -not -path "*/\.*" | head -1)" ]; then
            echo "has_ruby=true" >> $GITHUB_OUTPUT
          else
            echo "has_ruby=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Ruby
        if: steps.check-ruby.outputs.has_ruby == 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
      
      # Cache quality tools with fallback paths
      - name: Cache quality tools
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/.cargo
            ~/go/bin
            ~/checkstyle.jar
          key: ${{ runner.os }}-quality-tools-${{ hashFiles('**/package.json', '**/requirements.txt', '**/Cargo.toml', '**/go.mod', '**/Gemfile') || github.run_id }}
          restore-keys: |
            ${{ runner.os }}-quality-tools-
      
      - name: PR Review Bot
        uses: boredom1234/pr-review-bot-together@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          # Available models: Price per 1M tokens
          # meta-llama/Llama-3.3-70B-Instruct-Turbo                        $0.88
          # meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo-128K               $0.18
          # meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo                  $3.50
          # deepseek-ai/DeepSeek-V3                                        $1.25
          # deepseek-ai/DeepSeek-R1                                        $3.00 / $7.00
          TOGETHER_API_MODEL: 'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo'
          exclude: '*.md,*.txt'  # optional: files to exclude
          
          # Quality metrics options
          enable_quality_metrics: 'true'
          quality_tools: 'auto'  # or specify: 'eslint,pylint,golint,checkstyle,rubocop,clippy'
          quality_config_paths: '{"eslint":".eslintrc.json","pylint":"pylintrc"}'  # optional: custom config paths
          ignore_rules: '{"eslint":["no-console","no-unused-vars"],"pylint":["missing-docstring"]}'  # optional: rules to ignore
          ignore_files: '**/*.test.js,**/*.spec.js,**/vendor/**'  # optional: additional files to ignore
          fail_on_quality_issues: 'true'
          max_critical_issues: '0'
          max_warning_issues: '10'
          max_suggestion_issues: '-1'
          comment_mode: 'unresolved'  # options: 'all', 'new', 'unresolved'
