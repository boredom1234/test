name: PR Review Bot

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup Node.js for ESLint
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Setup Python for Pylint
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # Setup Go for Golint
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.x"

      # Setup Java for Checkstyle
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Setup Ruby for RuboCop
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"

      # Setup Rust for Clippy
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x

      # Install quality tools
      - name: Install quality tools
        run: |
          # Node.js tools
          npm install -g eslint

          # Python tools
          pip install pylint

          # Go tools
          go install golang.org/x/lint/golint@latest

          # Ruby tools
          gem install rubocop

          # .NET tools
          # Install global tools first
          dotnet tool install -g JetBrains.ReSharper.GlobalTools

          # Check if any .NET projects exist
          if [ -n "$(find . -name '*.csproj' -o -name '*.sln')" ]; then
            # Find the first .NET project directory
            PROJECT_DIR=$(dirname $(find . -name '*.csproj' -o -name '*.sln' | head -n 1))
            cd "$PROJECT_DIR"
            
            # Install analyzers at project level
            dotnet add package StyleCop.Analyzers
            dotnet add package Microsoft.CodeAnalysis.NetAnalyzers
            dotnet add package Microsoft.CodeAnalysis.CSharp.CodeStyle
            dotnet add package Roslynator.Analyzers
          else
            echo "No .NET projects found. Skipping analyzer package installation."
          fi

      # Create default configs
      - name: Create default configs
        run: |
          # ESLint config
          echo '{
            "extends": "eslint:recommended",
            "env": {
              "node": true,
              "es6": true
            }
          }' > .eslintrc.json

          # Pylint config
          echo '[MESSAGES CONTROL]
          disable=C0111,C0103' > .pylintrc

          # .NET configs
          echo "root = true

          [*.{cs,vb}]
          dotnet_analyzer_diagnostic.severity = warning" > .editorconfig

          echo '{
            "$schema": "https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json",
            "settings": {
              "documentationRules": {
                "companyName": "YourCompany"
              }
            }
          }' > stylecop.json

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/go/pkg/mod
            ~/.cargo/registry
            ~/.cargo/git
            ~/.dotnet/tools
            ~/.nuget/packages
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt', '**/go.sum', '**/Cargo.lock', '**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      # Run PR Review Bot
      - name: PR Review Bot
        uses: boredom1234/pr-review-bot-together@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          TOGETHER_API_MODEL: meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo
          enable_quality_metrics: true
          quality_tools: eslint,pylint,golint,checkstyle,rubocop,clippy,roslyn,stylecop,resharper
          quality_config_paths: '{"eslint":".eslintrc.json","pylint":".pylintrc","roslyn":".editorconfig","stylecop":"stylecop.json","resharper":"resharper.DotSettings"}'
          resharper_solution: ${{ github.workspace }}/*.sln
          ignore_rules: '{"eslint":["no-console","no-unused-vars"],"stylecop":["SA1633","SA1200"],"resharper":["RedundantUsingDirective"],"roslyn":["IDE0005"]}'
          ignore_files: "**/*.Designer.cs,**/obj/**,**/bin/**,**/*.g.cs"
          fail_on_quality_issues: false
          max_critical_issues: -1
          max_warning_issues: -1
          comment_mode: all
