name: PR Review Bot

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Function to check file types
      - name: Check file types
        id: check-files
        run: |
          check_files() {
            find . -type f -name "*.$1" | grep -q . && echo "true" || echo "false"
          }
          echo "has_js=$(check_files 'js' || check_files 'ts' || check_files 'jsx' || check_files 'tsx')" >> $GITHUB_OUTPUT
          echo "has_py=$(check_files 'py')" >> $GITHUB_OUTPUT
          echo "has_go=$(check_files 'go')" >> $GITHUB_OUTPUT
          echo "has_java=$(check_files 'java')" >> $GITHUB_OUTPUT
          echo "has_ruby=$(check_files 'rb')" >> $GITHUB_OUTPUT
          echo "has_rust=$(check_files 'rs')" >> $GITHUB_OUTPUT
          echo "has_dotnet=$(check_files 'cs' || check_files 'sln' || check_files 'csproj')" >> $GITHUB_OUTPUT

      # Setup Node.js for ESLint
      - name: Setup Node.js
        if: steps.check-files.outputs.has_js == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Setup Python for Pylint
      - name: Setup Python
        if: steps.check-files.outputs.has_py == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # Setup Go for Golint
      - name: Setup Go
        if: steps.check-files.outputs.has_go == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: "1.x"

      # Setup Java for Checkstyle
      - name: Setup Java
        if: steps.check-files.outputs.has_java == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Setup Ruby for RuboCop
      - name: Setup Ruby
        if: steps.check-files.outputs.has_ruby == 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"

      # Setup Rust for Clippy
      - name: Setup Rust
        if: steps.check-files.outputs.has_rust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy

      # Setup .NET
      - name: Setup .NET
        if: steps.check-files.outputs.has_dotnet == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x

      # Install quality tools
      - name: Install quality tools
        run: |
          if [[ "${{ steps.check-files.outputs.has_js }}" == "true" ]]; then
            npm install -g eslint
          fi

          if [[ "${{ steps.check-files.outputs.has_py }}" == "true" ]]; then
            python -m pip install pylint
          fi

          if [[ "${{ steps.check-files.outputs.has_go }}" == "true" ]]; then
            go install golang.org/x/lint/golint@latest
          fi

          if [[ "${{ steps.check-files.outputs.has_java }}" == "true" ]]; then
            wget -q https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.3.3/checkstyle-10.3.3-all.jar
          fi

          if [[ "${{ steps.check-files.outputs.has_ruby }}" == "true" ]]; then
            gem install rubocop
          fi

          if [[ "${{ steps.check-files.outputs.has_rust }}" == "true" ]]; then
            rustup component add clippy
          fi

          if [[ "${{ steps.check-files.outputs.has_dotnet }}" == "true" ]]; then
            dotnet tool install -g JetBrains.ReSharper.GlobalTools
            # Find project directory
            PROJECT_DIR=$(find . -name "*.csproj" -o -name "*.sln" | head -n 1 | xargs dirname)
            if [ ! -z "$PROJECT_DIR" ]; then
              cd "$PROJECT_DIR"
              dotnet add package Microsoft.CodeAnalysis.NetAnalyzers
              dotnet add package StyleCop.Analyzers
            fi
          fi

      # Create default configs
      - name: Create default configs
        run: |
          # Function to check if files with extension exist
          check_files() {
            find . -type f -name "*.$1" | grep -q .
          }

          # ESLint config (only if JS/TS files exist)
          if check_files "js" || check_files "ts" || check_files "jsx" || check_files "tsx"; then
            echo '{
              "extends": "eslint:recommended",
              "env": {
                "node": true,
                "es6": true
              }
            }' > .eslintrc.json
          fi

          # Pylint config (only if Python files exist)
          if check_files "py"; then
            echo '[MESSAGES CONTROL]
            disable=C0111,C0103' > .pylintrc
          fi

          # .NET configs (only if C# files exist)
          if check_files "cs" || check_files "sln" || check_files "csproj"; then
            echo "root = true

            [*.{cs,vb}]
            dotnet_analyzer_diagnostic.severity = warning" > .editorconfig

            echo '{
              "$schema": "https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json",
              "settings": {
                "documentationRules": {
                  "companyName": "YourCompany"
                }
              }
            }' > stylecop.json
          fi

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/go/pkg/mod
            ~/.cargo/registry
            ~/.cargo/git
            ~/.dotnet/tools
            ~/.nuget/packages
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt', '**/go.sum', '**/Cargo.lock', '**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      # Run PR Review Bot
      - name: PR Review Bot
        uses: boredom1234/pr-review-bot-together@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          TOGETHER_API_MODEL: meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo
          enable_quality_metrics: true
          quality_tools: eslint,pylint,golint,checkstyle,rubocop,clippy,roslyn,stylecop,resharper
          quality_config_paths: '{"eslint":".eslintrc.json","pylint":".pylintrc","roslyn":".editorconfig","stylecop":"stylecop.json","resharper":"resharper.DotSettings"}'
          resharper_solution: ${{ github.workspace }}/*.sln
          ignore_rules: '{"eslint":["no-console","no-unused-vars"],"stylecop":["SA1633","SA1200"],"resharper":["RedundantUsingDirective"],"roslyn":["IDE0005"]}'
          ignore_files: "**/*.Designer.cs,**/obj/**,**/bin/**,**/*.g.cs"
          fail_on_quality_issues: false
          max_critical_issues: -1
          max_warning_issues: -1
          comment_mode: all
